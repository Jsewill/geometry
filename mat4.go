/* */
package geometry

import (
	"math"
)

type Mat4x1 [4]Mat1x1

func (a Mat4x1) Add(b Mat4x1) Mat4x1 {
	return Mat4x1{
		Mat1x1{a[0][0] + b[0][0]},
		Mat1x1{a[1][0] + b[1][0]},
		Mat1x1{a[2][0] + b[2][0]},
		Mat1x1{a[3][0] + b[3][0]},
	}
}

func (m Mat4x1) AddScalar(f float64) Mat4x1 {
	return Mat4x1{
		Mat1x1{m[0][0] + f},
		Mat1x1{m[1][0] + f},
		Mat1x1{m[2][0] + f},
		Mat1x1{m[3][0] + f},
	}
}

func (m Mat4x1) Len() int {
	return 4
}

func (m Mat4x1) MultiplyScalar(f float64) Mat4x1 {
	return Mat4x1{
		Mat1x1{m[0][0] * f},
		Mat1x1{m[1][0] * f},
		Mat1x1{m[2][0] * f},
		Mat1x1{m[3][0] * f},
	}
}

func (a Mat4x1) MultiplyMat1x1(b Mat1x1) Mat4x1 {
	return Mat4x1{
		Mat1x1{a[0][0] * b[0]},
		Mat1x1{a[1][0] * b[0]},
		Mat1x1{a[2][0] * b[0]},
		Mat1x1{a[3][0] * b[0]},
	}
}

func (a Mat4x1) MultiplyMat1x2(b Mat1x2) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			a[0][0] * b[0],
			a[0][0] * b[1],
		},
		Mat1x2{
			a[1][0] * b[0],
			a[1][0] * b[1],
		},
		Mat1x2{
			a[2][0] * b[0],
			a[2][0] * b[1],
		},
		Mat1x2{
			a[3][0] * b[0],
			a[3][0] * b[1],
		},
	}
}

func (a Mat4x1) MultiplyMat1x3(b Mat1x3) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			a[0][0] * b[0],
			a[0][0] * b[1],
			a[0][0] * b[2],
		},
		Mat1x3{
			a[1][0] * b[0],
			a[1][0] * b[1],
			a[1][0] * b[2],
		},
		Mat1x3{
			a[2][0] * b[0],
			a[2][0] * b[1],
			a[2][0] * b[2],
		},
		Mat1x3{
			a[3][0] * b[0],
			a[3][0] * b[1],
			a[3][0] * b[2],
		},
	}
}

func (a Mat4x1) MultiplyMat1x4(b Mat1x4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			a[0][0] * b[1],
			a[0][0] * b[1],
			a[0][0] * b[2],
			a[0][0] * b[3],
		},
		Mat1x4{
			a[1][0] * b[1],
			a[1][0] * b[1],
			a[1][0] * b[2],
			a[1][0] * b[3],
		},
		Mat1x4{
			a[2][0] * b[1],
			a[2][0] * b[1],
			a[2][0] * b[2],
			a[2][0] * b[3],
		},
		Mat1x4{
			a[3][0] * b[1],
			a[3][0] * b[1],
			a[3][0] * b[2],
			a[3][0] * b[3],
		},
	}
}

func (m Mat4x1) MultiplyVec1(v Vec1) Vec4 {
	return Vec4{
		m[0][0] * v[0],
		m[1][0] * v[0],
		m[2][0] * v[0],
		m[3][0] * v[0],
	}
}

func (a Mat4x1) Subtract(b Mat4x1) Mat4x1 {
	return Mat4x1{
		Mat1x1{a[0][0] - b[0][0]},
		Mat1x1{a[1][0] - b[1][0]},
		Mat1x1{a[2][0] - b[2][0]},
		Mat1x1{a[3][0] - b[3][0]},
	}
}

func (m Mat4x1) SubtractScalar(f float64) Mat4x1 {
	return Mat4x1{
		Mat1x1{m[0][0] - f},
		Mat1x1{m[1][0] - f},
		Mat1x1{m[2][0] - f},
		Mat1x1{m[3][0] - f},
	}
}

func (m Mat4x1) Transpose() Mat1x4 {
	return Mat1x4{m[0][0], m[1][0], m[2][0], m[3][0]}
}

type Mat4x2 [4]Mat1x2

func (a Mat4x2) Add(b Mat4x2) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			a[0][0] + b[0][0],
			a[0][1] + b[0][1],
		},
		Mat1x2{
			a[1][0] + b[1][0],
			a[1][1] + b[1][1],
		},
		Mat1x2{
			a[2][0] + b[2][0],
			a[2][1] + b[2][1],
		},
		Mat1x2{
			a[3][0] + b[3][0],
			a[3][1] + b[3][1],
		},
	}
}

func (m Mat4x2) AddScalar(f float64) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			m[0][0] + f,
			m[0][1] + f,
		},
		Mat1x2{
			m[1][0] + f,
			m[1][1] + f,
		},
		Mat1x2{
			m[2][0] + f,
			m[2][1] + f,
		},
		Mat1x2{
			m[3][0] + f,
			m[3][1] + f,
		},
	}
}

func (m Mat4x2) Len() int {
	return 8
}

func (m Mat4x2) MultiplyScalar(f float64) Mat4x2 {
	return Mat4x2{
		Mat1x2{m[0][0] * f, m[0][1] * f},
		Mat1x2{m[1][0] * f, m[1][1] * f},
		Mat1x2{m[2][0] * f, m[2][1] * f},
		Mat1x2{m[3][0] * f, m[3][1] * f},
	}
}

func (a Mat4x2) MultiplyMat2x1(b Mat2x1) Mat4x1 {
	return Mat4x1{
		Mat1x1{a[0][0]*b[0][0] + a[0][1]*b[1][0]},
		Mat1x1{a[1][0]*b[0][0] + a[1][1]*b[1][0]},
		Mat1x1{a[2][0]*b[0][0] + a[2][1]*b[1][0]},
		Mat1x1{a[3][0]*b[0][0] + a[3][1]*b[1][0]},
	}
}

func (a Mat4x2) MultiplyMat2x2(b Mat2x2) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			a[0][0]*b[0][0] + a[0][1]*b[1][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1],
		},
		Mat1x2{
			a[1][0]*b[0][0] + a[1][1]*b[1][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1],
		},
		Mat1x2{
			a[2][0]*b[0][0] + a[2][1]*b[1][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1],
		},
		Mat1x2{
			a[3][0]*b[0][0] + a[3][1]*b[1][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1],
		},
	}
}

func (a Mat4x2) MultiplyMat2x3(b Mat2x3) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			a[0][0]*b[0][0] + a[0][1]*b[1][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1],
			a[0][0]*b[0][2] + a[0][1]*b[1][2],
		},
		Mat1x3{
			a[1][0]*b[0][0] + a[1][1]*b[1][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1],
			a[1][0]*b[0][2] + a[1][1]*b[1][2],
		},
		Mat1x3{
			a[2][0]*b[0][0] + a[2][1]*b[1][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1],
			a[2][0]*b[0][2] + a[2][1]*b[1][2],
		},
		Mat1x3{
			a[3][0]*b[0][0] + a[3][1]*b[1][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1],
			a[3][0]*b[0][2] + a[3][1]*b[1][2],
		},
	}
}

func (a Mat4x2) MultiplyMat2x4(b Mat2x4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			a[0][0]*b[0][0] + a[0][1]*b[1][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1],
			a[0][0]*b[0][2] + a[0][1]*b[1][2],
			a[0][0]*b[0][3] + a[0][1]*b[1][3],
		},
		Mat1x4{
			a[1][0]*b[0][0] + a[1][1]*b[1][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1],
			a[1][0]*b[0][2] + a[1][1]*b[1][2],
			a[1][0]*b[0][3] + a[1][1]*b[1][3],
		},
		Mat1x4{
			a[2][0]*b[0][0] + a[2][1]*b[1][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1],
			a[2][0]*b[0][2] + a[2][1]*b[1][2],
			a[2][0]*b[0][3] + a[2][1]*b[1][3],
		},
		Mat1x4{
			a[3][0]*b[0][0] + a[3][1]*b[1][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1],
			a[3][0]*b[0][2] + a[3][1]*b[1][2],
			a[3][0]*b[0][3] + a[3][1]*b[1][3],
		},
	}
}

func (m Mat4x2) MultiplyVec2(v Vec2) Vec4 {
	return Vec4{
		m[0][0]*v[0] + m[0][1]*v[1],
		m[1][0]*v[0] + m[1][1]*v[1],
		m[2][0]*v[0] + m[2][1]*v[1],
		m[3][0]*v[0] + m[3][1]*v[1],
	}
}

func (a Mat4x2) Subtract(b Mat4x2) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			a[0][0] - b[0][0],
			a[0][1] - b[0][1],
		},
		Mat1x2{
			a[1][0] - b[1][0],
			a[1][1] - b[1][1],
		},
		Mat1x2{
			a[2][0] - b[2][0],
			a[2][1] - b[2][1],
		},
		Mat1x2{
			a[3][0] - b[3][0],
			a[3][1] - b[3][1],
		},
	}
}

func (m Mat4x2) SubtractScalar(f float64) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			m[0][0] - f,
			m[0][1] - f,
		},
		Mat1x2{
			m[1][0] - f,
			m[1][1] - f,
		},
		Mat1x2{
			m[2][0] - f,
			m[2][1] - f,
		},
		Mat1x2{
			m[3][0] - f,
			m[3][1] - f,
		},
	}
}

func (m Mat4x2) Transpose() Mat2x4 {
	return Mat2x4{
		Mat1x4{m[0][0], m[1][0], m[2][0], m[3][0]},
		Mat1x4{m[0][1], m[1][1], m[2][1], m[3][1]},
	}
}

type Mat4x3 [4]Mat1x3

func (a Mat4x3) Add(b Mat4x3) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			a[0][0] + b[0][0],
			a[0][1] + b[0][1],
			a[0][2] + b[0][2],
		},
		Mat1x3{
			a[1][0] + b[1][0],
			a[1][1] + b[1][1],
			a[1][2] + b[1][2],
		},
		Mat1x3{
			a[2][0] + b[2][0],
			a[2][1] + b[2][1],
			a[2][2] + b[2][2],
		},
		Mat1x3{
			a[3][0] + b[3][0],
			a[3][1] + b[3][1],
			a[3][2] + b[3][2],
		},
	}
}

func (m Mat4x3) AddScalar(f float64) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			m[0][0] + f,
			m[0][1] + f,
			m[0][2] + f,
		},
		Mat1x3{
			m[1][0] + f,
			m[1][1] + f,
			m[1][2] + f,
		},
		Mat1x3{
			m[2][0] + f,
			m[2][1] + f,
			m[2][2] + f,
		},
		Mat1x3{
			m[3][0] + f,
			m[3][1] + f,
			m[3][2] + f,
		},
	}
}

func (m Mat4x3) Len() int {
	return 12
}

func (m Mat4x3) MultiplyScalar(f float64) Mat4x3 {
	return Mat4x3{
		Mat1x3{m[0][0] * f, m[0][1] * f, m[0][2] * f},
		Mat1x3{m[1][0] * f, m[1][1] * f, m[1][2] * f},
		Mat1x3{m[2][0] * f, m[2][1] * f, m[2][2] * f},
		Mat1x3{m[3][0] * f, m[3][1] * f, m[3][2] * f},
	}
}

func (a Mat4x3) MultiplyMat3x1(b Mat3x1) Mat4x1 {
	return Mat4x1{
		Mat1x1{a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0]},
		Mat1x1{a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0]},
		Mat1x1{a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0]},
		Mat1x1{a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0]},
	}
}

func (a Mat4x3) MultiplyMat3x2(b Mat3x2) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1],
		},
		Mat1x2{
			a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1],
		},
		Mat1x2{
			a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1],
		},
		Mat1x2{
			a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1],
		},
	}
}

func (a Mat4x3) MultiplyMat3x3(b Mat3x3) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1],
			a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2],
		},
		Mat1x3{
			a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1],
			a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2],
		},
		Mat1x3{
			a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1],
			a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2],
		},
		Mat1x3{
			a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1],
			a[3][0]*b[0][2] + a[3][1]*b[1][2] + a[3][2]*b[2][2],
		},
	}
}

func (a Mat4x3) MultiplyMat3x4(b Mat3x4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1],
			a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2],
			a[0][0]*b[0][3] + a[0][1]*b[1][3] + a[0][2]*b[2][3],
		},
		Mat1x4{
			a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1],
			a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2],
			a[1][0]*b[0][3] + a[1][1]*b[1][3] + a[1][2]*b[2][3],
		},
		Mat1x4{
			a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1],
			a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2],
			a[2][0]*b[0][3] + a[2][1]*b[1][3] + a[2][2]*b[2][3],
		},
		Mat1x4{
			a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1],
			a[3][0]*b[0][2] + a[3][1]*b[1][2] + a[3][2]*b[2][2],
			a[3][0]*b[0][3] + a[3][1]*b[1][3] + a[3][2]*b[2][3],
		},
	}
}

func (m Mat4x3) MultiplyVec3(v Vec3) Vec4 {
	return Vec4{
		m[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2],
		m[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2],
		m[2][0]*v[0] + m[2][1]*v[1] + m[2][2]*v[2],
		m[3][0]*v[0] + m[3][1]*v[1] + m[3][2]*v[2],
	}
}

func (a Mat4x3) Subtract(b Mat4x3) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			a[0][0] - b[0][0],
			a[0][1] - b[0][1],
			a[0][2] - b[0][2],
		},
		Mat1x3{
			a[1][0] - b[1][0],
			a[1][1] - b[1][1],
			a[1][2] - b[1][2],
		},
		Mat1x3{
			a[2][0] - b[2][0],
			a[2][1] - b[2][1],
			a[2][2] - b[2][2],
		},
		Mat1x3{
			a[3][0] - b[3][0],
			a[3][1] - b[3][1],
			a[3][2] - b[3][2],
		},
	}
}

func (m Mat4x3) SubtractScalar(f float64) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			m[0][0] - f,
			m[0][1] - f,
			m[0][2] - f,
		},
		Mat1x3{
			m[1][0] - f,
			m[1][1] - f,
			m[1][2] - f,
		},
		Mat1x3{
			m[2][0] - f,
			m[2][1] - f,
			m[2][2] - f,
		},
		Mat1x3{
			m[3][0] - f,
			m[3][1] - f,
			m[3][2] - f,
		},
	}
}

func (m Mat4x3) Transpose() Mat3x4 {
	return Mat3x4{
		Mat1x4{m[0][0], m[1][0], m[2][0], m[3][0]},
		Mat1x4{m[0][1], m[1][1], m[2][1], m[3][1]},
		Mat1x4{m[0][2], m[1][2], m[2][2], m[3][2]},
	}
}

type Mat4x4 [4]Mat1x4

func (a Mat4x4) Add(b Mat4x4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			a[0][0] + b[0][0],
			a[0][1] + b[0][1],
			a[0][2] + b[0][2],
			a[0][3] + b[0][3],
		},
		Mat1x4{
			a[1][0] + b[1][0],
			a[1][1] + b[1][1],
			a[1][2] + b[1][2],
			a[1][3] + b[1][3],
		},
		Mat1x4{
			a[2][0] + b[2][0],
			a[2][1] + b[2][1],
			a[2][2] + b[2][2],
			a[2][3] + b[2][3],
		},
		Mat1x4{
			a[3][0] + b[3][0],
			a[3][1] + b[3][1],
			a[3][2] + b[3][2],
			a[3][3] + b[3][3],
		},
	}
}

func (m Mat4x4) AddScalar(f float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + f,
			m[0][1] + f,
			m[0][2] + f,
			m[0][3] + f,
		},
		Mat1x4{
			m[1][0] + f,
			m[1][1] + f,
			m[1][2] + f,
			m[1][3] + f,
		},
		Mat1x4{
			m[2][0] + f,
			m[2][1] + f,
			m[2][2] + f,
			m[2][3] + f,
		},
		Mat1x4{
			m[3][0] + f,
			m[3][1] + f,
			m[3][2] + f,
			m[3][3] + f,
		},
	}
}

func (m Mat4x4) Convolute(k Mat4x4) float64 {
	return m[0][0]*k[3][3] + m[0][1]*k[3][2] + m[0][2]*k[3][1] + m[0][3]*k[3][0] + m[1][0]*k[2][3] + m[1][1]*k[2][2] + m[1][2]*k[3][1] + m[1][3]*k[3][0] + m[2][0]*k[1][3] + m[2][1]*k[1][2] + m[2][2]*k[1][1] + m[2][3]*k[1][0] + m[3][0]*k[0][3] + m[3][1]*k[0][2] + m[3][2]*k[0][1] + m[3][3]*k[0][0]
}

func (m Mat4x4) Determinant() float64 {
	return m[0][0]*m[1][1]*m[2][2]*m[3][3] + m[0][0]*m[1][2]*m[2][3]*m[3][1] + m[0][0]*m[1][3]*m[2][1]*m[3][2] - m[0][0]*m[1][3]*m[2][2]*m[3][1] - m[0][0]*m[1][2]*m[2][1]*m[3][3] - m[0][0]*m[1][1]*m[2][3]*m[3][2] - m[0][1]*m[1][0]*m[2][2]*m[3][3] + m[0][1]*m[1][2]*m[2][3]*m[3][0] + m[0][1]*m[1][3]*m[2][0]*m[3][2] - m[0][1]*m[1][3]*m[2][2]*m[3][0] - m[0][1]*m[1][2]*m[2][0]*m[3][3] - m[0][1]*m[1][1]*m[2][3]*m[3][2] + m[0][2]*m[1][0]*m[2][1]*m[3][3] + m[0][2]*m[1][1]*m[2][3]*m[3][0] + m[0][2]*m[1][3]*m[2][0]*m[3][1] - m[0][2]*m[1][3]*m[2][1]*m[3][0] - m[0][2]*m[1][1]*m[2][0]*m[3][3] - m[0][2]*m[1][1]*m[2][3]*m[3][1] - m[0][3]*m[1][0]*m[2][1]*m[3][2] + m[0][3]*m[1][1]*m[2][2]*m[3][0] + m[0][3]*m[1][2]*m[2][0]*m[3][1] - m[0][3]*m[1][2]*m[2][1]*m[3][0] - m[0][3]*m[1][1]*m[2][0]*m[3][2] - m[0][3]*m[1][1]*m[2][2]*m[3][1]
}

func (m Mat4x4) Homogenize() MatNxN {
	return MatNxN{
		Mat1xN(append(m[0][:], 0)),
		Mat1xN(append(m[1][:], 0)),
		Mat1xN(append(m[2][:], 0)),
		Mat1xN(append(m[3][:], 0)),
		Mat1xN{0, 0, 0, 0, 1},
	}
}

func (m Mat4x4) Inverse() Mat4x4 {
	//Determinant
	d := m[0][0]*m[1][1]*m[2][2]*m[3][3] + m[0][0]*m[1][2]*m[2][3]*m[3][1] + m[0][0]*m[1][3]*m[2][1]*m[3][2] - m[0][0]*m[1][3]*m[2][2]*m[3][1] - m[0][0]*m[1][2]*m[2][1]*m[3][3] - m[0][0]*m[1][1]*m[2][3]*m[3][2] - m[0][1]*m[1][0]*m[2][2]*m[3][3] + m[0][1]*m[1][2]*m[2][3]*m[3][0] + m[0][1]*m[1][3]*m[2][0]*m[3][2] - m[0][1]*m[1][3]*m[2][2]*m[3][0] - m[0][1]*m[1][2]*m[2][0]*m[3][3] - m[0][1]*m[1][1]*m[2][3]*m[3][2] + m[0][2]*m[1][0]*m[2][1]*m[3][3] + m[0][2]*m[1][1]*m[2][3]*m[3][0] + m[0][2]*m[1][3]*m[2][0]*m[3][1] - m[0][2]*m[1][3]*m[2][1]*m[3][0] - m[0][2]*m[1][1]*m[2][0]*m[3][3] - m[0][2]*m[1][1]*m[2][3]*m[3][1] - m[0][3]*m[1][0]*m[2][1]*m[3][2] + m[0][3]*m[1][1]*m[2][2]*m[3][0] + m[0][3]*m[1][2]*m[2][0]*m[3][1] - m[0][3]*m[1][2]*m[2][1]*m[3][0] - m[0][3]*m[1][1]*m[2][0]*m[3][2] - m[0][3]*m[1][1]*m[2][2]*m[3][1]

	//Invertible? @TODO: Implement an approximate equality test to avoid false positives due to inherent floating point math variances.
	if d == 0 {
		return Mat4x4{}
	}

	d = 1.0 / d

	//Return the transpose of the matrix of the determinants of each sub matrix.
	return Mat4x4{
		Mat1x4{
			d * (m[1][1]*m[2][2]*m[3][3] + m[1][2]*m[2][3]*m[3][1] + m[1][3]*m[2][1]*m[3][2] - m[1][1]*m[2][3]*m[3][2] - m[1][2]*m[2][1]*m[3][3] - m[1][3]*m[2][2]*m[3][1]),
			d * (m[0][1]*m[2][3]*m[3][2] + m[0][2]*m[2][1]*m[3][3] + m[0][3]*m[2][2]*m[3][1] - m[0][1]*m[2][2]*m[3][3] - m[0][2]*m[2][3]*m[3][1] - m[0][3]*m[2][1]*m[3][2]),
			d * (m[0][1]*m[1][2]*m[3][3] + m[0][2]*m[1][3]*m[3][1] + m[0][3]*m[1][1]*m[3][2] - m[0][1]*m[1][3]*m[3][2] - m[0][2]*m[1][1]*m[3][3] - m[0][3]*m[1][2]*m[3][1]),
			d * (m[0][1]*m[1][3]*m[2][2] + m[0][2]*m[1][1]*m[2][3] + m[0][3]*m[1][2]*m[2][1] - m[0][1]*m[1][2]*m[2][3] - m[0][2]*m[1][3]*m[2][1] - m[0][3]*m[1][1]*m[2][2]),
		},
		Mat1x4{
			d * (m[1][0]*m[2][3]*m[3][2] + m[1][2]*m[2][0]*m[3][3] + m[1][3]*m[2][2]*m[3][0] - m[1][0]*m[2][2]*m[3][3] - m[1][2]*m[2][3]*m[3][0] - m[1][3]*m[2][0]*m[3][2]),
			d * (m[0][0]*m[2][2]*m[3][3] + m[0][2]*m[2][3]*m[3][1] + m[0][3]*m[2][0]*m[3][2] - m[0][0]*m[2][3]*m[3][2] - m[0][2]*m[2][0]*m[3][3] - m[0][3]*m[2][2]*m[3][0]),
			d * (m[0][0]*m[1][3]*m[3][2] + m[0][2]*m[1][0]*m[3][3] + m[0][3]*m[1][2]*m[3][0] - m[0][0]*m[1][2]*m[3][3] - m[0][2]*m[1][3]*m[3][0] - m[0][3]*m[1][0]*m[3][2]),
			d * (m[0][0]*m[1][2]*m[2][3] + m[0][2]*m[1][3]*m[2][0] + m[0][3]*m[1][0]*m[2][2] - m[0][0]*m[1][3]*m[2][2] - m[0][2]*m[1][0]*m[2][3] - m[0][3]*m[1][2]*m[2][0]),
		},
		Mat1x4{
			d * (m[1][0]*m[2][1]*m[3][3] + m[1][1]*m[2][3]*m[3][0] + m[1][3]*m[1][0]*m[2][2] - m[1][0]*m[2][3]*m[3][1] - m[1][1]*m[2][0]*m[3][3] - m[1][3]*m[2][1]*m[3][0]),
			d * (m[0][0]*m[2][3]*m[3][1] + m[0][1]*m[2][0]*m[3][3] + m[0][3]*m[2][1]*m[3][0] - m[0][0]*m[2][1]*m[3][3] - m[0][1]*m[2][3]*m[3][0] - m[0][3]*m[2][0]*m[3][1]),
			d * (m[0][0]*m[1][1]*m[3][3] + m[0][1]*m[1][3]*m[3][0] + m[0][3]*m[1][0]*m[3][1] - m[0][0]*m[1][3]*m[3][1] - m[0][1]*m[1][0]*m[3][3] - m[0][3]*m[1][1]*m[3][0]),
			d * (m[0][0]*m[1][3]*m[2][1] + m[0][1]*m[1][0]*m[2][3] + m[0][3]*m[1][1]*m[2][0] - m[0][0]*m[1][1]*m[2][3] - m[0][1]*m[1][3]*m[2][0] - m[0][3]*m[1][0]*m[2][1]),
		},
		Mat1x4{
			d * (m[1][0]*m[2][2]*m[3][1] + m[1][1]*m[2][0]*m[3][2] + m[1][2]*m[2][0]*m[3][2] - m[1][0]*m[2][1]*m[3][2] - m[1][1]*m[2][2]*m[3][0] - m[1][2]*m[2][0]*m[3][1]),
			d * (m[0][0]*m[2][1]*m[3][2] + m[0][1]*m[2][2]*m[3][0] + m[0][2]*m[2][0]*m[3][1] - m[0][0]*m[2][2]*m[3][1] - m[0][1]*m[2][0]*m[3][2] - m[0][2]*m[2][1]*m[3][0]),
			d * (m[0][0]*m[1][2]*m[3][1] + m[0][1]*m[1][0]*m[3][2] + m[0][2]*m[1][1]*m[3][0] - m[0][0]*m[1][1]*m[3][2] - m[0][1]*m[1][2]*m[3][0] - m[0][2]*m[1][0]*m[3][1]),
			d * (m[0][0]*m[1][1]*m[2][2] + m[0][1]*m[1][2]*m[2][0] + m[0][2]*m[1][0]*m[2][1] - m[0][0]*m[1][2]*m[2][1] - m[0][1]*m[1][0]*m[2][2] - m[0][2]*m[1][1]*m[2][0]),
		},
	}
}

func (m Mat4x4) Len() int {
	return 16
}

func (m Mat4x4) LinearReflectW() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], m[0][1], m[0][2], -m[0][3]},
		Mat1x4{m[1][0], m[1][1], m[1][2], -m[1][3]},
		Mat1x4{m[2][0], m[2][1], m[2][2], -m[2][3]},
		Mat1x4{m[3][0], m[3][1], m[3][2], -m[3][3]},
	}
}

func (m Mat4x4) LinearReflectX() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], m[0][1], m[0][2], m[0][3]},
		Mat1x4{-m[1][0], m[1][1], m[1][2], m[1][3]},
		Mat1x4{-m[2][0], m[2][1], m[2][2], m[2][3]},
		Mat1x4{-m[3][0], m[3][1], m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXW() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], m[0][1], m[0][2], -m[0][3]},
		Mat1x4{-m[1][0], m[1][1], m[1][2], -m[1][3]},
		Mat1x4{-m[2][0], m[2][1], m[2][2], -m[2][3]},
		Mat1x4{-m[3][0], m[3][1], m[3][2], -m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXY() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], -m[0][1], m[0][2], m[0][3]},
		Mat1x4{-m[1][0], -m[1][1], m[1][2], m[1][3]},
		Mat1x4{-m[2][0], -m[2][1], m[2][2], m[2][3]},
		Mat1x4{-m[3][0], -m[3][1], m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXYW() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], -m[0][1], m[0][2], -m[0][3]},
		Mat1x4{-m[1][0], -m[1][1], m[1][2], -m[1][3]},
		Mat1x4{-m[2][0], -m[2][1], m[2][2], -m[2][3]},
		Mat1x4{-m[3][0], -m[3][1], m[3][2], -m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXYZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], -m[0][1], -m[0][2], m[0][3]},
		Mat1x4{-m[1][0], -m[1][1], -m[1][2], m[1][3]},
		Mat1x4{-m[2][0], -m[2][1], -m[2][2], m[2][3]},
		Mat1x4{-m[3][0], -m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXYZW() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], -m[0][1], -m[0][2], -m[0][3]},
		Mat1x4{-m[1][0], -m[1][1], -m[1][2], -m[1][3]},
		Mat1x4{-m[2][0], -m[2][1], -m[2][2], -m[2][3]},
		Mat1x4{-m[3][0], -m[3][1], -m[3][2], -m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], m[0][1], -m[0][2], m[0][3]},
		Mat1x4{-m[1][0], m[1][1], -m[1][2], m[1][3]},
		Mat1x4{-m[2][0], m[2][1], -m[2][2], m[2][3]},
		Mat1x4{-m[3][0], m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectXZW() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], m[0][1], -m[0][2], -m[0][3]},
		Mat1x4{-m[1][0], m[1][1], -m[1][2], -m[1][3]},
		Mat1x4{-m[2][0], m[2][1], -m[2][2], -m[2][3]},
		Mat1x4{-m[3][0], m[3][1], -m[3][2], -m[3][3]},
	}
}

func (m Mat4x4) LinearReflectY() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], -m[0][1], m[0][2], m[0][3]},
		Mat1x4{m[1][0], -m[1][1], m[1][2], m[1][3]},
		Mat1x4{m[2][0], -m[2][1], m[2][2], m[2][3]},
		Mat1x4{m[3][0], -m[3][1], m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectYW() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], -m[0][1], m[0][2], -m[0][3]},
		Mat1x4{m[1][0], -m[1][1], m[1][2], -m[1][3]},
		Mat1x4{m[2][0], -m[2][1], m[2][2], -m[2][3]},
		Mat1x4{m[3][0], -m[3][1], m[3][2], -m[3][3]},
	}
}

func (m Mat4x4) LinearReflectYZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], -m[0][1], -m[0][2], m[0][3]},
		Mat1x4{m[1][0], -m[1][1], -m[1][2], m[1][3]},
		Mat1x4{m[2][0], -m[2][1], -m[2][2], m[2][3]},
		Mat1x4{m[3][0], -m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], m[0][1], -m[0][2], m[0][3]},
		Mat1x4{m[1][0], m[1][1], -m[1][2], m[1][3]},
		Mat1x4{m[2][0], m[2][1], -m[2][2], m[2][3]},
		Mat1x4{m[3][0], m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) LinearReflectZW() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], m[0][1], -m[0][2], -m[0][3]},
		Mat1x4{m[1][0], m[1][1], -m[1][2], -m[1][3]},
		Mat1x4{m[2][0], m[2][1], -m[2][2], -m[2][3]},
		Mat1x4{m[3][0], m[3][1], -m[3][2], -m[3][3]},
	}
}

//Takes up to six angles representing the subsequent rotation in each plane. Order is as follows: ZW, YW, YZ, XW, XZ, XY
func (m Mat4x4) LinearRotate(Θ [6]float64) Mat4x4 {
	var planes int
	for i, θ := range Θ {
		if θ != 0 {
			planes |= 1 << uint(i)
		}
	}

	if planes == 0 {
		return Mat4x4{
			Mat1x4{m[0][0], m[0][1], m[0][2], m[0][3]},
			Mat1x4{m[1][0], m[1][1], m[1][2], m[1][3]},
			Mat1x4{m[2][0], m[2][1], m[2][2], m[2][3]},
			Mat1x4{m[3][0], m[3][1], m[3][2], m[3][3]},
		}
	}

	var c, s float64
	var a, b Mat4x4

	switch {
	//Rotate in the ZW plane.
	case planes&1 > 0:
		c, s = math.Cos(Θ[0]), math.Sin(Θ[0])
		a = Mat4x4{
			Mat1x4{
				m[0][0],
				m[0][1],
				m[0][2]*c + m[0][3]*s,
				m[0][2]*-s + m[0][3]*c,
			},
			Mat1x4{
				m[1][0],
				m[1][1],
				m[1][2]*c + m[1][3]*s,
				m[1][2]*-s + m[1][3]*c,
			},
			Mat1x4{
				m[2][0],
				m[2][1],
				m[2][2]*c + m[2][3]*s,
				m[2][2]*-s + m[2][3]*c,
			},
			Mat1x4{
				m[3][0],
				m[3][1],
				m[3][2]*c + m[3][3]*s,
				m[3][2]*-s + m[3][3]*c,
			},
		}

		fallthrough
	//Rotate in the YW plane.
	case planes&2 > 0:
		c, s = math.Cos(Θ[1]), math.Sin(Θ[1])
		b = Mat4x4{
			Mat1x4{
				m[0][0],
				m[0][1]*c + m[0][3]*s,
				m[0][2],
				m[0][1]*-s + m[0][3]*c,
			},
			Mat1x4{
				m[1][0],
				m[1][1]*c + m[1][3]*s,
				m[1][2],
				m[1][1]*-s + m[1][3]*c,
			},
			Mat1x4{
				m[2][0],
				m[2][1]*c + m[2][3]*s,
				m[2][2],
				m[2][1]*-s + m[2][3]*c,
			},
			Mat1x4{
				m[3][0],
				m[3][1]*c + m[3][3]*s,
				m[3][2],
				m[3][1]*-s + m[3][3]*c,
			},
		}

		if planes&1 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}

		fallthrough
	//Rotate in the YZ plane.
	case planes&4 > 0:
		c, s = math.Cos(Θ[2]), math.Sin(Θ[2])
		b = Mat4x4{
			Mat1x4{
				m[0][0],
				m[0][1]*c + m[0][2]*-s,
				m[0][1]*s + m[0][2]*c,
				m[0][3],
			},
			Mat1x4{
				m[1][0],
				m[1][1]*c + m[1][2]*-s,
				m[1][1]*s + m[1][2]*c,
				m[1][3],
			},
			Mat1x4{
				m[2][0],
				m[2][1]*c + m[2][2]*-s,
				m[2][1]*s + m[2][2]*c,
				m[2][3],
			},
			Mat1x4{
				m[3][0],
				m[3][1]*c + m[3][2]*-s,
				m[3][1]*s + m[3][2]*c,
				m[3][3],
			},
		}

		if planes&3 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}

		fallthrough
	//Rotate in the XW plane.
	case planes&8 > 0:
		c, s = math.Cos(Θ[3]), math.Sin(Θ[3])
		b = Mat4x4{
			Mat1x4{
				m[0][0]*c + m[0][3]*-s,
				m[0][1],
				m[0][2],
				m[0][0]*s + m[0][3]*c,
			},
			Mat1x4{
				m[1][0]*c + m[1][3]*-s,
				m[1][1],
				m[1][2],
				m[1][0]*s + m[1][3]*c,
			},
			Mat1x4{
				m[2][0]*c + m[2][3]*-s,
				m[2][1],
				m[2][2],
				m[2][0]*s + m[2][3]*c,
			},
			Mat1x4{
				m[3][0]*c + m[3][3]*-s,
				m[3][1],
				m[3][2],
				m[3][0]*s + m[3][3]*c,
			},
		}

		if planes&7 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}

		fallthrough
	//Rotate in the XZ plane.
	case planes&16 > 0:
		c, s = math.Cos(Θ[4]), math.Sin(Θ[4])
		b = Mat4x4{
			Mat1x4{
				m[0][0]*c + m[0][2]*s,
				m[0][1],
				m[0][0]*-s + m[0][2]*c,
				m[0][3],
			},
			Mat1x4{
				m[1][0]*c + m[1][2]*s,
				m[1][1],
				m[1][0]*-s + m[1][2]*c,
				m[1][3],
			},
			Mat1x4{
				m[2][0]*c + m[2][2]*s,
				m[2][1],
				m[2][0]*-s + m[2][2]*c,
				m[2][3],
			},
			Mat1x4{
				m[3][0]*c + m[3][2]*s,
				m[3][1],
				m[3][0]*-s + m[3][2]*c,
				m[3][3],
			},
		}

		if planes&15 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}

		fallthrough
	//Rotate in the XY plane.
	case planes&32 > 0:
		c, s = math.Cos(Θ[5]), math.Sin(Θ[5])
		b = Mat4x4{
			Mat1x4{
				m[0][0]*c + m[0][1]*-s,
				m[0][0]*s + m[0][1]*c,
				m[0][2],
				m[0][3],
			},
			Mat1x4{
				m[1][0]*c + m[1][1]*-s,
				m[1][0]*s + m[1][1]*c,
				m[1][2],
				m[1][3],
			},
			Mat1x4{
				m[2][0]*c + m[2][1]*-s,
				m[2][0]*s + m[2][1]*c,
				m[2][2],
				m[2][3],
			},
			Mat1x4{
				m[3][0]*c + m[3][1]*-s,
				m[3][0]*s + m[3][1]*c,
				m[3][2],
				m[3][3],
			},
		}

		if planes&31 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}
	}

	return a
}

//Rotate in the XY Plane
func (m Mat4x4) LinearRotateXY(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0]*c + m[0][1]*-s,
			m[0][0]*s + m[0][1]*c,
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0]*c + m[1][1]*-s,
			m[1][0]*s + m[1][1]*c,
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0]*c + m[2][1]*-s,
			m[2][0]*s + m[2][1]*c,
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0]*c + m[3][1]*-s,
			m[3][0]*s + m[3][1]*c,
			m[3][2],
			m[3][3],
		},
	}
}

//Rotate in the XZ Plane
func (m Mat4x4) LinearRotateXZ(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0]*c + m[0][2]*s,
			m[0][1],
			m[0][0]*-s + m[0][2]*c,
			m[0][3],
		},
		Mat1x4{
			m[1][0]*c + m[1][2]*s,
			m[1][1],
			m[1][0]*-s + m[1][2]*c,
			m[1][3],
		},
		Mat1x4{
			m[2][0]*c + m[2][2]*s,
			m[2][1],
			m[2][0]*-s + m[2][2]*c,
			m[2][3],
		},
		Mat1x4{
			m[3][0]*c + m[3][2]*s,
			m[3][1],
			m[3][0]*-s + m[3][2]*c,
			m[3][3],
		},
	}
}

//Rotate in the XW Plane
func (m Mat4x4) LinearRotateXW(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0]*c + m[0][3]*-s,
			m[0][1],
			m[0][2],
			m[0][0]*s + m[0][3]*c,
		},
		Mat1x4{
			m[1][0]*c + m[1][3]*-s,
			m[1][1],
			m[1][2],
			m[1][0]*s + m[1][3]*c,
		},
		Mat1x4{
			m[2][0]*c + m[2][3]*-s,
			m[2][1],
			m[2][2],
			m[2][0]*s + m[2][3]*c,
		},
		Mat1x4{
			m[3][0]*c + m[3][3]*-s,
			m[3][1],
			m[3][2],
			m[3][0]*s + m[3][3]*c,
		},
	}
}

//Rotate in the YZ Plane
func (m Mat4x4) LinearRotateYZ(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1]*c + m[0][2]*-s,
			m[0][1]*s + m[0][2]*c,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1]*c + m[1][2]*-s,
			m[1][1]*s + m[1][2]*c,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1]*c + m[2][2]*-s,
			m[2][1]*s + m[2][2]*c,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1]*c + m[3][2]*-s,
			m[3][1]*s + m[3][2]*c,
			m[3][3],
		},
	}
}

//Rotate in the YW Plane
func (m Mat4x4) LinearRotateYW(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1]*c + m[0][3]*s,
			m[0][2],
			m[0][1]*-s + m[0][3]*c,
		},
		Mat1x4{
			m[1][0],
			m[1][1]*c + m[1][3]*s,
			m[1][2],
			m[1][1]*-s + m[1][3]*c,
		},
		Mat1x4{
			m[2][0],
			m[2][1]*c + m[2][3]*s,
			m[2][2],
			m[2][1]*-s + m[2][3]*c,
		},
		Mat1x4{
			m[3][0],
			m[3][1]*c + m[3][3]*s,
			m[3][2],
			m[3][1]*-s + m[3][3]*c,
		},
	}
}

//Rotate in the ZW Plane
func (m Mat4x4) LinearRotateZW(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2]*c + m[0][3]*s,
			m[0][2]*-s + m[0][3]*c,
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2]*c + m[1][3]*s,
			m[1][2]*-s + m[1][3]*c,
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2]*c + m[2][3]*s,
			m[2][2]*-s + m[2][3]*c,
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2]*c + m[3][3]*s,
			m[3][2]*-s + m[3][3]*c,
		},
	}
}

func (m Mat4x4) LinearScale(Δ Vec4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1] * Δ[1],
			m[0][2] * Δ[2],
			m[0][3] * Δ[3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1] * Δ[1],
			m[1][2] * Δ[2],
			m[1][3] * Δ[3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1] * Δ[1],
			m[2][2] * Δ[2],
			m[2][3] * Δ[3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1] * Δ[1],
			m[3][2] * Δ[2],
			m[3][3] * Δ[3],
		},
	}
}

func (m Mat4x4) LinearScaleW(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][3] * Δ,
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][3] * Δ,
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][3] * Δ,
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][3] * Δ,
		},
	}
}

func (m Mat4x4) LinearScaleX(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ,
			m[0][1],
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ,
			m[1][1],
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ,
			m[2][1],
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ,
			m[3][1],
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleXW(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1],
			m[0][2],
			m[0][3] * Δ[1],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1],
			m[1][2],
			m[1][3] * Δ[1],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1],
			m[2][2],
			m[2][3] * Δ[1],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1],
			m[3][2],
			m[3][3] * Δ[1],
		},
	}
}

func (m Mat4x4) LinearScaleXY(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1] * Δ[1],
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1] * Δ[1],
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1] * Δ[1],
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1] * Δ[1],
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleXYZ(Δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1] * Δ[1],
			m[0][2] * Δ[2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1] * Δ[1],
			m[1][2] * Δ[2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1] * Δ[1],
			m[2][2] * Δ[2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1] * Δ[1],
			m[3][2] * Δ[2],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleXYZW(Δ Vec4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1] * Δ[1],
			m[0][2] * Δ[2],
			m[0][3] * Δ[3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1] * Δ[1],
			m[1][2] * Δ[2],
			m[1][3] * Δ[3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1] * Δ[1],
			m[2][2] * Δ[2],
			m[2][3] * Δ[3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1] * Δ[1],
			m[3][2] * Δ[2],
			m[3][3] * Δ[3],
		},
	}
}

func (m Mat4x4) LinearScaleXZ(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1],
			m[0][2] * Δ[1],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1],
			m[1][2] * Δ[1],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1],
			m[2][2] * Δ[1],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1],
			m[3][2] * Δ[1],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleXZW(Δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1],
			m[0][2] * Δ[1],
			m[0][3] * Δ[2],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1],
			m[1][2] * Δ[1],
			m[1][3] * Δ[2],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1],
			m[2][2] * Δ[1],
			m[2][3] * Δ[2],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1],
			m[3][2] * Δ[1],
			m[3][3] * Δ[2],
		},
	}
}

func (m Mat4x4) LinearScaleY(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1] * Δ,
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1] * Δ,
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1] * Δ,
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1] * Δ,
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleYW(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1] * Δ[0],
			m[0][2],
			m[0][3] * Δ[1],
		},
		Mat1x4{
			m[1][0],
			m[1][1] * Δ[0],
			m[1][2],
			m[1][3] * Δ[1],
		},
		Mat1x4{
			m[2][0],
			m[2][1] * Δ[0],
			m[2][2],
			m[2][3] * Δ[1],
		},
		Mat1x4{
			m[3][0],
			m[3][1] * Δ[0],
			m[3][2],
			m[3][3] * Δ[1],
		},
	}
}

func (m Mat4x4) LinearScaleYZ(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1] * Δ[0],
			m[0][2] * Δ[1],
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1] * Δ[0],
			m[1][2] * Δ[1],
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1] * Δ[0],
			m[2][2] * Δ[1],
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1] * Δ[0],
			m[3][2] * Δ[1],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleYZW(Δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1] * Δ[0],
			m[0][2] * Δ[1],
			m[0][3] * Δ[2],
		},
		Mat1x4{
			m[1][0],
			m[1][1] * Δ[0],
			m[1][2] * Δ[1],
			m[1][3] * Δ[2],
		},
		Mat1x4{
			m[2][0],
			m[2][1] * Δ[0],
			m[2][2] * Δ[1],
			m[2][3] * Δ[2],
		},
		Mat1x4{
			m[3][0],
			m[3][1] * Δ[0],
			m[3][2] * Δ[1],
			m[3][3] * Δ[2],
		},
	}
}

func (m Mat4x4) LinearScaleZ(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2] * Δ,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2] * Δ,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2] * Δ,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2] * Δ,
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearScaleZW(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2] * Δ[0],
			m[0][3] * Δ[1],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2] * Δ[0],
			m[1][3] * Δ[1],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2] * Δ[0],
			m[2][3] * Δ[1],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2] * Δ[0],
			m[3][3] * Δ[1],
		},
	}
}

func (m Mat4x4) LinearShearW(τ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][3]*τ[0],
			m[0][1] + m[0][3]*τ[1],
			m[0][2] + m[0][3]*τ[2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][3]*τ[0],
			m[1][1] + m[1][3]*τ[1],
			m[1][2] + m[1][3]*τ[2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][3]*τ[0],
			m[2][1] + m[2][3]*τ[1],
			m[2][2] + m[2][3]*τ[2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][3]*τ[0],
			m[3][1] + m[3][3]*τ[1],
			m[3][2] + m[3][3]*τ[2],
			m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearX(τ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][0]*τ[0] + m[0][1],
			m[0][0]*τ[1] + m[0][2],
			m[0][0]*τ[2] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][0]*τ[0] + m[1][1],
			m[1][0]*τ[1] + m[1][2],
			m[1][0]*τ[2] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][0]*τ[0] + m[2][1],
			m[2][0]*τ[1] + m[2][2],
			m[2][0]*τ[2] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][0]*τ[0] + m[3][1],
			m[3][0]*τ[1] + m[3][2],
			m[3][0]*τ[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXW(τx, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][3]*τw[0],
			m[0][0]*τx[0] + m[0][1] + m[0][3]*τw[1],
			m[0][0]*τx[1] + m[0][2] + m[0][3]*τw[2],
			m[0][0]*τx[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][3]*τw[0],
			m[1][0]*τx[0] + m[1][1] + m[1][3]*τw[1],
			m[1][0]*τx[1] + m[1][2] + m[1][3]*τw[2],
			m[1][0]*τx[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][3]*τw[0],
			m[2][0]*τx[0] + m[2][1] + m[2][3]*τw[1],
			m[2][0]*τx[1] + m[2][2] + m[2][3]*τw[2],
			m[2][0]*τx[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][3]*τw[0],
			m[3][0]*τx[0] + m[3][1] + m[3][3]*τw[1],
			m[3][0]*τx[1] + m[3][2] + m[3][3]*τw[2],
			m[3][0]*τx[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXY(τx, τy Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0],
			m[0][0]*τx[0] + m[0][1],
			m[0][0]*τx[1] + m[0][1]*τy[1] + m[0][2],
			m[0][0]*τx[2] + m[0][1]*τy[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0],
			m[1][0]*τx[0] + m[1][1],
			m[1][0]*τx[1] + m[1][1]*τy[1] + m[1][2],
			m[1][0]*τx[2] + m[1][1]*τy[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0],
			m[2][0]*τx[0] + m[2][1],
			m[2][0]*τx[1] + m[2][1]*τy[1] + m[2][2],
			m[2][0]*τx[2] + m[2][1]*τy[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0],
			m[3][0]*τx[0] + m[3][1],
			m[3][0]*τx[1] + m[3][1]*τy[1] + m[3][2],
			m[3][0]*τx[2] + m[3][1]*τy[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXYW(τx, τy, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][3]*τw[0],
			m[0][0]*τx[0] + m[0][1] + m[0][3]*τw[1],
			m[0][0]*τx[1] + m[0][1]*τy[1] + m[0][2] + m[0][3]*τw[2],
			m[0][0]*τx[2] + m[0][1]*τy[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][3]*τw[0],
			m[1][0]*τx[0] + m[1][1] + m[1][3]*τw[1],
			m[1][0]*τx[1] + m[1][1]*τy[1] + m[1][2] + m[1][3]*τw[2],
			m[1][0]*τx[2] + m[1][1]*τy[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][3]*τw[0],
			m[2][0]*τx[0] + m[2][1] + m[2][3]*τw[1],
			m[2][0]*τx[1] + m[2][1]*τy[1] + m[2][2] + m[2][3]*τw[2],
			m[2][0]*τx[2] + m[2][1]*τy[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][3]*τw[0],
			m[3][0]*τx[0] + m[3][1] + m[3][3]*τw[1],
			m[3][0]*τx[1] + m[3][1]*τy[1] + m[3][2] + m[3][3]*τw[2],
			m[3][0]*τx[2] + m[3][1]*τy[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXYZ(τx, τy, τz Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][2]*τz[0],
			m[0][0]*τx[0] + m[0][1] + m[0][2]*τz[1],
			m[0][0]*τx[1] + m[0][1]*τy[1] + m[0][2],
			m[0][0]*τx[2] + m[0][1]*τy[2] + m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][2]*τz[0],
			m[1][0]*τx[0] + m[1][1] + m[1][2]*τz[1],
			m[1][0]*τx[1] + m[1][1]*τy[1] + m[1][2],
			m[1][0]*τx[2] + m[1][1]*τy[2] + m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][2]*τz[0],
			m[2][0]*τx[0] + m[2][1] + m[2][2]*τz[1],
			m[2][0]*τx[1] + m[2][1]*τy[1] + m[2][2],
			m[2][0]*τx[2] + m[2][1]*τy[2] + m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][2]*τz[0],
			m[3][0]*τx[0] + m[3][1] + m[3][2]*τz[1],
			m[3][0]*τx[1] + m[3][1]*τy[1] + m[3][2],
			m[3][0]*τx[2] + m[3][1]*τy[2] + m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXYZW(τx, τy, τz, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][2]*τz[0] + m[0][3]*τw[0],
			m[0][0]*τx[0] + m[0][1] + m[0][2]*τz[1] + m[0][3]*τw[1],
			m[0][0]*τx[1] + m[0][1]*τy[1] + m[0][2] + m[0][3]*τw[2],
			m[0][0]*τx[2] + m[0][1]*τy[2] + m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][2]*τz[0] + m[1][3]*τw[0],
			m[1][0]*τx[0] + m[1][1] + m[1][2]*τz[1] + m[1][3]*τw[1],
			m[1][0]*τx[1] + m[1][1]*τy[1] + m[1][2] + m[1][3]*τw[2],
			m[1][0]*τx[2] + m[1][1]*τy[2] + m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][2]*τz[0] + m[2][3]*τw[0],
			m[2][0]*τx[0] + m[2][1] + m[2][2]*τz[1] + m[2][3]*τw[1],
			m[2][0]*τx[1] + m[2][1]*τy[1] + m[2][2] + m[2][3]*τw[2],
			m[2][0]*τx[2] + m[2][1]*τy[2] + m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][2]*τz[0] + m[3][3]*τw[0],
			m[3][0]*τx[0] + m[3][1] + m[3][2]*τz[1] + m[3][3]*τw[1],
			m[3][0]*τx[1] + m[3][1]*τy[1] + m[3][2] + m[3][3]*τw[2],
			m[3][0]*τx[2] + m[3][1]*τy[2] + m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXZ(τx, τz Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][2]*τz[0],
			m[0][0]*τx[0] + m[0][1] + m[0][2]*τz[1],
			m[0][0]*τx[1] + m[0][2],
			m[0][0]*τx[2] + m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][2]*τz[0],
			m[1][0]*τx[0] + m[1][1] + m[1][2]*τz[1],
			m[1][0]*τx[1] + m[1][2],
			m[1][0]*τx[2] + m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][2]*τz[0],
			m[2][0]*τx[0] + m[2][1] + m[2][2]*τz[1],
			m[2][0]*τx[1] + m[2][2],
			m[2][0]*τx[2] + m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][2]*τz[0],
			m[3][0]*τx[0] + m[3][1] + m[3][2]*τz[1],
			m[3][0]*τx[1] + m[3][2],
			m[3][0]*τx[2] + m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearXZW(τx, τz, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][2]*τz[0] + m[0][3]*τw[0],
			m[0][0]*τx[0] + m[0][1] + m[0][2]*τz[1] + m[0][3]*τw[1],
			m[0][0]*τx[1] + m[0][2] + m[0][3]*τw[2],
			m[0][0]*τx[2] + m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][2]*τz[0] + m[1][3]*τw[0],
			m[1][0]*τx[0] + m[1][1] + m[1][2]*τz[1] + m[1][3]*τw[1],
			m[1][0]*τx[1] + m[1][2] + m[1][3]*τw[2],
			m[1][0]*τx[2] + m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][2]*τz[0] + m[2][3]*τw[0],
			m[2][0]*τx[0] + m[2][1] + m[2][2]*τz[1] + m[2][3]*τw[1],
			m[2][0]*τx[1] + m[2][2] + m[2][3]*τw[2],
			m[2][0]*τx[2] + m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][2]*τz[0] + m[3][3]*τw[0],
			m[3][0]*τx[0] + m[3][1] + m[3][2]*τz[1] + m[3][3]*τw[1],
			m[3][0]*τx[1] + m[3][2] + m[3][3]*τw[2],
			m[3][0]*τx[2] + m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearY(τ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τ[0],
			m[0][1],
			m[0][1]*τ[1] + m[0][2],
			m[0][1]*τ[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τ[0],
			m[1][1],
			m[1][1]*τ[1] + m[1][2],
			m[1][1]*τ[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τ[0],
			m[2][1],
			m[2][1]*τ[1] + m[2][2],
			m[2][1]*τ[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τ[0],
			m[3][1],
			m[3][1]*τ[1] + m[3][2],
			m[3][1]*τ[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearYW(τy, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][3]*τw[0],
			m[0][1] + m[0][3]*τw[1],
			m[0][1]*τy[1] + m[0][2] + m[0][3]*τw[2],
			m[0][1]*τy[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][3]*τw[0],
			m[1][1] + m[1][3]*τw[1],
			m[1][1]*τy[1] + m[1][2] + m[1][3]*τw[2],
			m[1][1]*τy[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][3]*τw[0],
			m[2][1] + m[2][3]*τw[1],
			m[2][1]*τy[1] + m[2][2] + m[2][3]*τw[2],
			m[2][1]*τy[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][3]*τw[0],
			m[3][1] + m[3][3]*τw[1],
			m[3][1]*τy[1] + m[3][2] + m[3][3]*τw[2],
			m[3][1]*τy[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearYZ(τy, τz Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][2]*τz[0],
			m[0][1] + m[0][2]*τz[1],
			m[0][1]*τy[1] + m[0][2],
			m[0][1]*τy[2] + m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][2]*τz[0],
			m[1][1] + m[1][2]*τz[1],
			m[1][1]*τy[1] + m[1][2],
			m[1][1]*τy[2] + m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][2]*τz[0],
			m[2][1] + m[2][2]*τz[1],
			m[2][1]*τy[1] + m[2][2],
			m[2][1]*τy[2] + m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][2]*τz[0],
			m[3][1] + m[3][2]*τz[1],
			m[3][1]*τy[1] + m[3][2],
			m[3][1]*τy[2] + m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearYZW(τy, τz, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][2]*τz[0] + m[0][3]*τw[0],
			m[0][1] + m[0][2]*τz[1] + m[0][3]*τw[1],
			m[0][1]*τy[1] + m[0][2] + m[0][3]*τw[2],
			m[0][1]*τy[2] + m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][2]*τz[0] + m[1][3]*τw[0],
			m[1][1] + m[1][2]*τz[1] + m[1][3]*τw[1],
			m[1][1]*τy[1] + m[1][2] + m[1][3]*τw[2],
			m[1][1]*τy[2] + m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][2]*τz[0] + m[2][3]*τw[0],
			m[2][1] + m[2][2]*τz[1] + m[2][3]*τw[1],
			m[2][1]*τy[1] + m[2][2] + m[2][3]*τw[2],
			m[2][1]*τy[2] + m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][2]*τz[0] + m[3][3]*τw[0],
			m[3][1] + m[3][2]*τz[1] + m[3][3]*τw[1],
			m[3][1]*τy[1] + m[3][2] + m[3][3]*τw[2],
			m[3][1]*τy[2] + m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearZ(τ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][2]*τ[0],
			m[0][1] + m[0][2]*τ[1],
			m[0][2],
			m[0][2]*τ[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][2]*τ[0],
			m[1][1] + m[1][2]*τ[1],
			m[1][2],
			m[1][2]*τ[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][2]*τ[0],
			m[2][1] + m[2][2]*τ[1],
			m[2][2],
			m[2][2]*τ[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][2]*τ[0],
			m[3][1] + m[3][2]*τ[1],
			m[3][2],
			m[3][2]*τ[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearShearZW(τz, τw Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][2]*τz[0] + m[0][3]*τw[0],
			m[0][1] + m[0][2]*τz[1] + m[0][3]*τw[1],
			m[0][2] + m[0][3]*τw[2],
			m[0][2]*τz[2] + m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][2]*τz[0] + m[1][3]*τw[0],
			m[1][1] + m[1][2]*τz[1] + m[1][3]*τw[1],
			m[1][2] + m[1][3]*τw[2],
			m[1][2]*τz[2] + m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][2]*τz[0] + m[2][3]*τw[0],
			m[2][1] + m[2][2]*τz[1] + m[2][3]*τw[1],
			m[2][2] + m[2][3]*τw[2],
			m[2][2]*τz[2] + m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][2]*τz[0] + m[3][3]*τw[0],
			m[3][1] + m[3][2]*τz[1] + m[3][3]*τw[1],
			m[3][2] + m[3][3]*τw[2],
			m[3][2]*τz[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslate(δ Vec4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][1]*δ[1] + m[0][2]*δ[2] + m[0][3]*δ[3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][1]*δ[1] + m[1][2]*δ[2] + m[1][3]*δ[3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][1]*δ[1] + m[2][2]*δ[2] + m[2][3]*δ[3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][1]*δ[1] + m[3][2]*δ[2] + m[3][3]*δ[3],
		},
	}
}

func (m Mat4x4) LinearTranslateW(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][3] * δ,
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][3] * δ,
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][3] * δ,
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][3] * δ,
		},
	}
}

func (m Mat4x4) LinearTranslateX(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateXW(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][3]*δ[1],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][3]*δ[1],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][3]*δ[1],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][3]*δ[1],
		},
	}
}

func (m Mat4x4) LinearTranslateXY(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][1]*δ[1] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][1]*δ[1] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][1]*δ[1] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][1]*δ[1] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateXYZ(δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][1]*δ[1] + m[0][2]*δ[2] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][1]*δ[1] + m[1][2]*δ[2] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][1]*δ[1] + m[2][2]*δ[2] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][1]*δ[1] + m[3][2]*δ[2] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateXYZW(δ Vec4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][1]*δ[1] + m[0][2]*δ[2] + m[0][3]*δ[3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][1]*δ[1] + m[1][2]*δ[2] + m[1][3]*δ[3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][1]*δ[1] + m[2][2]*δ[2] + m[2][3]*δ[3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][1]*δ[1] + m[3][2]*δ[2] + m[3][3]*δ[3],
		},
	}
}

func (m Mat4x4) LinearTranslateXZ(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][2]*δ[1] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][2]*δ[1] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][2]*δ[1] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][2]*δ[1] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateY(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][1]*δ + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][1]*δ + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][1]*δ + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][1]*δ + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateYW(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][1]*δ[0] + m[0][3]*δ[1],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][1]*δ[0] + m[1][3]*δ[1],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][1]*δ[0] + m[2][3]*δ[1],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][1]*δ[0] + m[3][3]*δ[1],
		},
	}
}

func (m Mat4x4) LinearTranslateYZ(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][1]*δ[0] + m[0][2]*δ[1] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][1]*δ[0] + m[1][2]*δ[1] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][1]*δ[0] + m[2][2]*δ[1] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][1]*δ[0] + m[3][2]*δ[1] + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateYZW(δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][1]*δ[0] + m[0][2]*δ[1] + m[0][3]*δ[2],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][1]*δ[0] + m[1][2]*δ[1] + m[1][3]*δ[2],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][1]*δ[0] + m[2][2]*δ[1] + m[2][3]*δ[2],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][1]*δ[0] + m[3][2]*δ[1] + m[3][3]*δ[2],
		},
	}
}

func (m Mat4x4) LinearTranslateZ(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][2]*δ + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][2]*δ + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][2]*δ + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][2]*δ + m[3][3],
		},
	}
}

func (m Mat4x4) LinearTranslateZW(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][2]*δ[0] + m[0][3]*δ[1],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][2]*δ[0] + m[1][3]*δ[1],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][2]*δ[0] + m[2][3]*δ[1],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][2]*δ[0] + m[3][3]*δ[1],
		},
	}
}

func (m Mat4x4) MultiplyScalar(f float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0] * f, m[0][1] * f, m[0][2] * f, m[0][3] * f},
		Mat1x4{m[1][0] * f, m[1][1] * f, m[1][2] * f, m[1][3] * f},
		Mat1x4{m[2][0] * f, m[2][1] * f, m[2][2] * f, m[2][3] * f},
		Mat1x4{m[3][0] * f, m[3][1] * f, m[3][2] * f, m[3][3] * f},
	}
}

func (a Mat4x4) MultiplyMat4x1(b Mat4x1) Mat4x1 {
	return Mat4x1{
		Mat1x1{a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0] + a[0][3]*b[3][0]},
		Mat1x1{a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0] + a[1][3]*b[3][0]},
		Mat1x1{a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0] + a[2][3]*b[3][0]},
		Mat1x1{a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0] + a[3][3]*b[3][0]},
	}
}

func (a Mat4x4) MultiplyMat4x2(b Mat4x2) Mat4x2 {
	return Mat4x2{
		Mat1x2{
			a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0] + a[0][3]*b[3][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1] + a[0][3]*b[3][1],
		},
		Mat1x2{
			a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0] + a[1][3]*b[3][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1] + a[1][3]*b[3][1],
		},
		Mat1x2{
			a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0] + a[2][3]*b[3][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1] + a[2][3]*b[3][1],
		},
		Mat1x2{
			a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0] + a[3][3]*b[3][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1] + a[3][3]*b[3][1],
		},
	}
}

func (a Mat4x4) MultiplyMat4x3(b Mat4x3) Mat4x3 {
	return Mat4x3{
		Mat1x3{
			a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0] + a[0][3]*b[3][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1] + a[0][3]*b[3][1],
			a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] + a[0][3]*b[3][2],
		},
		Mat1x3{
			a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0] + a[1][3]*b[3][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1] + a[1][3]*b[3][1],
			a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] + a[1][3]*b[3][2],
		},
		Mat1x3{
			a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0] + a[2][3]*b[3][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1] + a[2][3]*b[3][1],
			a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] + a[2][3]*b[3][2],
		},
		Mat1x3{
			a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0] + a[3][3]*b[3][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1] + a[3][3]*b[3][1],
			a[3][0]*b[0][2] + a[3][1]*b[1][2] + a[3][2]*b[2][2] + a[3][3]*b[3][2],
		},
	}
}

func (a Mat4x4) MultiplyMat4x4(b Mat4x4) Mat4x4 {
	/*
		return Mat4x4{
			Mat1x4{
				a00*b00 + a01*b10 + a02*b20 + a03*b30,
				a00*b01 + a01*b11 + a02*b21 + a03*b31,
				a00*b02 + a01*b12 + a02*b22 + a03*b32,
				a00*b03 + a01*b13 + a02*b23 + a03*b33,
			},
			Mat1x4{
				a10*b00 + a11*b10 + a12*b20 + a13*b30,
				a10*b01 + a11*b11 + a12*b21 + a13*b31,
				a10*b02 + a11*b12 + a12*b22 + a13*b32,
				a10*b03 + a11*b13 + a12*b23 + a13*b33,
			},
			Mat1x4{
				a20*b00 + a21*b10 + a22*b20 + a23*b30,
				a20*b01 + a21*b11 + a22*b21 + a23*b31,
				a20*b02 + a21*b12 + a22*b22 + a23*b32,
				a20*b03 + a21*b13 + a22*b23 + a23*b33,
			},
			Mat1x4{
				a30*b00 + a31*b10 + a32*b20 + a33*b30,
				a30*b01 + a31*b11 + a32*b21 + a33*b31,
				a30*b02 + a31*b12 + a32*b22 + a33*b32,
				a30*b03 + a31*b13 + a32*b23 + a33*b33,
			},
		}
	*/
	return Mat4x4{
		Mat1x4{
			a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0] + a[0][3]*b[3][0],
			a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1] + a[0][3]*b[3][1],
			a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] + a[0][3]*b[3][2],
			a[0][0]*b[0][3] + a[0][1]*b[1][3] + a[0][2]*b[2][3] + a[0][3]*b[3][3],
		},
		Mat1x4{
			a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0] + a[1][3]*b[3][0],
			a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1] + a[1][3]*b[3][1],
			a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] + a[1][3]*b[3][2],
			a[1][0]*b[0][3] + a[1][1]*b[1][3] + a[1][2]*b[2][3] + a[1][3]*b[3][3],
		},
		Mat1x4{
			a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0] + a[2][3]*b[3][0],
			a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1] + a[2][3]*b[3][1],
			a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] + a[2][3]*b[3][2],
			a[2][0]*b[0][3] + a[2][1]*b[1][3] + a[2][2]*b[2][3] + a[2][3]*b[3][3],
		},
		Mat1x4{
			a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0] + a[3][3]*b[3][0],
			a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1] + a[3][3]*b[3][1],
			a[3][0]*b[0][2] + a[3][1]*b[1][2] + a[3][2]*b[2][2] + a[3][3]*b[3][2],
			a[3][0]*b[0][3] + a[3][1]*b[1][3] + a[3][2]*b[2][3] + a[3][3]*b[3][3],
		},
	}
}

func (m Mat4x4) MultiplyVec4(v Vec4) Vec4 {
	return Vec4{
		m[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2] + m[0][3]*v[3],
		m[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2] + m[1][3]*v[3],
		m[2][0]*v[0] + m[2][1]*v[1] + m[2][2]*v[2] + m[2][3]*v[3],
		m[3][0]*v[0] + m[3][1]*v[1] + m[3][2]*v[2] + m[3][3]*v[3],
	}
}

func (m Mat4x4) ReflectX() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], m[0][1], m[0][2], m[0][3]},
		Mat1x4{-m[1][0], m[1][1], m[1][2], m[1][3]},
		Mat1x4{-m[2][0], m[2][1], m[2][2], m[2][3]},
		Mat1x4{-m[3][0], m[3][1], m[3][2], m[3][3]},
	}
}

func (m Mat4x4) ReflectXY() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], -m[0][1], m[0][2], m[0][3]},
		Mat1x4{-m[1][0], -m[1][1], m[1][2], m[1][3]},
		Mat1x4{-m[2][0], -m[2][1], m[2][2], m[2][3]},
		Mat1x4{-m[3][0], -m[3][1], m[3][2], m[3][3]},
	}
}

func (m Mat4x4) ReflectXYZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], -m[0][1], -m[0][2], m[0][3]},
		Mat1x4{-m[1][0], -m[1][1], -m[1][2], m[1][3]},
		Mat1x4{-m[2][0], -m[2][1], -m[2][2], m[2][3]},
		Mat1x4{-m[3][0], -m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) ReflectXZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{-m[0][0], m[0][1], -m[0][2], m[0][3]},
		Mat1x4{-m[1][0], m[1][1], -m[1][2], m[1][3]},
		Mat1x4{-m[2][0], m[2][1], -m[2][2], m[2][3]},
		Mat1x4{-m[3][0], m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) ReflectY() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], -m[0][1], m[0][2], m[0][3]},
		Mat1x4{m[1][0], -m[1][1], m[1][2], m[1][3]},
		Mat1x4{m[2][0], -m[2][1], m[2][2], m[2][3]},
		Mat1x4{m[3][0], -m[3][1], m[3][2], m[3][3]},
	}
}

func (m Mat4x4) ReflectYZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], -m[0][1], -m[0][2], m[0][3]},
		Mat1x4{m[1][0], -m[1][1], -m[1][2], m[1][3]},
		Mat1x4{m[2][0], -m[2][1], -m[2][2], m[2][3]},
		Mat1x4{m[3][0], -m[3][1], -m[3][2], m[3][3]},
	}
}

func (m Mat4x4) ReflectZ() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], m[0][1], -m[0][2], m[0][3]},
		Mat1x4{m[1][0], m[1][1], -m[1][2], m[1][3]},
		Mat1x4{m[2][0], m[2][1], -m[2][2], m[2][3]},
		Mat1x4{m[3][0], m[3][1], -m[3][2], m[3][3]},
	}
}

//Takes up to three angles representing the subsequent rotation in each plane. Order is as follows: YZ, XZ, XY
func (m Mat4x4) Rotate(Θ Vec3) Mat4x4 {
	var planes int
	for i, θ := range Θ {
		if θ != 0 {
			planes |= 1 << uint(i)
		}
	}

	if planes == 0 {
		return Mat4x4{
			Mat1x4{m[0][0], m[0][1], m[0][2], m[0][3]},
			Mat1x4{m[1][0], m[1][1], m[1][2], m[1][3]},
			Mat1x4{m[2][0], m[2][1], m[2][2], m[2][3]},
			Mat1x4{m[3][0], m[3][1], m[3][2], m[3][3]},
		}
	}

	var c, s float64
	var a, b Mat4x4

	switch {
	//X-axis rotation
	//Rotate in the YZ Plane
	case planes&1 > 0:
		c, s = math.Cos(Θ[0]), math.Sin(Θ[0])
		b = Mat4x4{
			Mat1x4{
				m[0][0],
				m[0][1]*c + m[0][2]*s,
				m[0][1]*-s + m[0][2]*c,
				m[0][3],
			},
			Mat1x4{
				m[1][0],
				m[1][1]*c + m[1][2]*s,
				m[1][1]*-s + m[1][2]*c,
				m[1][3],
			},
			Mat1x4{
				m[2][0],
				m[2][1]*c + m[2][2]*s,
				m[2][1]*-s + m[2][2]*c,
				m[2][3],
			},
			Mat1x4{
				m[3][0],
				m[3][1]*c + m[3][2]*s,
				m[3][1]*-s + m[3][2]*c,
				m[3][3],
			},
		}

		fallthrough
	//Y-axis rotation
	//Rotate in the XZ Plane
	case planes&2 > 0:
		c, s = math.Cos(Θ[1]), math.Sin(Θ[1])
		b = Mat4x4{
			Mat1x4{
				m[0][0]*c + m[0][2]*-s,
				m[0][1],
				m[0][0]*s + m[0][2]*c,
				m[0][3],
			},
			Mat1x4{
				m[1][0]*c + m[1][2]*-s,
				m[1][1],
				m[1][0]*s + m[1][2]*c,
				m[1][3],
			},
			Mat1x4{
				m[2][0]*c + m[2][2]*-s,
				m[2][1],
				m[2][0]*s + m[2][2]*c,
				m[2][3],
			},
			Mat1x4{
				m[3][0]*c + m[3][2]*-s,
				m[3][1],
				m[3][0]*s + m[3][2]*c,
				m[3][3],
			},
		}

		if planes&1 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}

		fallthrough
	//Z-axis rotation
	//Rotate in the XY Plane
	case planes&4 > 0:
		c, s = math.Cos(Θ[2]), math.Sin(Θ[2])
		b = Mat4x4{
			Mat1x4{
				m[0][0]*c + m[0][1]*s,
				m[0][0]*-s + m[0][1]*c,
				m[0][2],
				m[0][3],
			},
			Mat1x4{
				m[1][0]*c + m[1][1]*s,
				m[1][0]*-s + m[1][1]*c,
				m[1][2],
				m[1][3],
			},
			Mat1x4{
				m[2][0]*c + m[2][1]*s,
				m[2][0]*-s + m[2][1]*c,
				m[2][2],
				m[2][3],
			},
			Mat1x4{
				m[3][0]*c + m[3][1]*s,
				m[3][0]*-s + m[3][1]*c,
				m[3][2],
				m[3][3],
			},
		}

		if planes&3 == 0 {
			a = b
		} else {
			a = a.MultiplyMat4x4(b)
		}
	}

	return a
}

//Rotate in the YZ Plane
func (m Mat4x4) RotateX(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1]*c + m[0][2]*s,
			m[0][1]*-s + m[0][2]*c,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1]*c + m[1][2]*s,
			m[1][1]*-s + m[1][2]*c,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1]*c + m[2][2]*s,
			m[2][1]*-s + m[2][2]*c,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1]*c + m[3][2]*s,
			m[3][1]*-s + m[3][2]*c,
			m[3][3],
		},
	}
}

func (m Mat4x4) RotateXY(Θx, Θy float64) Mat4x4 {
	xc, xs, yc, ys := math.Cos(Θx), math.Sin(Θx), math.Cos(Θy), math.Sin(Θy)
	x := Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1]*xc + m[0][2]*xs,
			m[0][1]*-xs + m[0][2]*xc,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1]*xc + m[1][2]*xs,
			m[1][1]*-xs + m[1][2]*xc,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1]*xc + m[2][2]*xs,
			m[2][1]*-xs + m[2][2]*xc,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1]*xc + m[3][2]*xs,
			m[3][1]*-xs + m[3][2]*xc,
			m[3][3],
		},
	}

	return Mat4x4{
		Mat1x4{
			x[0][0]*yc + x[0][2]*-ys,
			x[0][1],
			x[0][0]*ys + x[0][2]*yc,
			x[0][3],
		},
		Mat1x4{
			x[1][0]*yc + x[1][2]*-ys,
			x[1][1],
			x[1][0]*ys + x[1][2]*yc,
			x[1][3],
		},
		Mat1x4{
			x[2][0]*yc + x[2][2]*-ys,
			x[2][1],
			x[2][0]*ys + x[2][2]*yc,
			x[2][3],
		},
		Mat1x4{
			x[3][0]*yc + x[3][2]*-ys,
			x[3][1],
			x[3][0]*ys + x[3][2]*yc,
			x[3][3],
		},
	}
}

func (m Mat4x4) RotateXZ(Θx, Θz float64) Mat4x4 {
	xc, xs, zc, zs := math.Cos(Θx), math.Sin(Θx), math.Cos(Θz), math.Sin(Θz)
	x := Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1]*xc + m[0][2]*xs,
			m[0][1]*-xs + m[0][2]*xc,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1]*xc + m[1][2]*xs,
			m[1][1]*-xs + m[1][2]*xc,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1]*xc + m[2][2]*xs,
			m[2][1]*-xs + m[2][2]*xc,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1]*xc + m[3][2]*xs,
			m[3][1]*-xs + m[3][2]*xc,
			m[3][3],
		},
	}

	return Mat4x4{
		Mat1x4{
			x[0][0]*zc + x[0][1]*zs,
			x[0][0]*-zs + x[0][1]*zc,
			x[0][2],
			x[0][3],
		},
		Mat1x4{
			x[1][0]*zc + x[1][1]*zs,
			x[1][0]*-zs + x[1][1]*zc,
			x[1][2],
			x[1][3],
		},
		Mat1x4{
			x[2][0]*zc + x[2][1]*zs,
			x[2][0]*-zs + x[2][1]*zc,
			x[2][2],
			x[2][3],
		},
		Mat1x4{
			x[3][0]*zc + x[3][1]*zs,
			x[3][0]*-zs + x[3][1]*zc,
			x[3][2],
			x[3][3],
		},
	}
}

func (m Mat4x4) RotateXYZ(Θx, Θy, Θz float64) Mat4x4 {
	xc, xs, yc, ys, zc, zs := math.Cos(Θx), math.Sin(Θx), math.Cos(Θy), math.Sin(Θy), math.Cos(Θz), math.Sin(Θz)
	x := Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1]*xc + m[0][2]*xs,
			m[0][1]*-xs + m[0][2]*xc,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1]*xc + m[1][2]*xs,
			m[1][1]*-xs + m[1][2]*xc,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1]*xc + m[2][2]*xs,
			m[2][1]*-xs + m[2][2]*xc,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1]*xc + m[3][2]*xs,
			m[3][1]*-xs + m[3][2]*xc,
			m[3][3],
		},
	}

	xy := Mat4x4{
		Mat1x4{
			x[0][0]*yc + x[0][2]*-ys,
			x[0][1],
			x[0][0]*ys + x[0][2]*yc,
			x[0][3],
		},
		Mat1x4{
			x[1][0]*yc + x[1][2]*-ys,
			x[1][1],
			x[1][0]*ys + x[1][2]*yc,
			x[1][3],
		},
		Mat1x4{
			x[2][0]*yc + x[2][2]*-ys,
			x[2][1],
			x[2][0]*ys + x[2][2]*yc,
			x[2][3],
		},
		Mat1x4{
			x[3][0]*yc + x[3][2]*-ys,
			x[3][1],
			x[3][0]*ys + x[3][2]*yc,
			x[3][3],
		},
	}

	return Mat4x4{
		Mat1x4{
			xy[0][0]*zc + xy[0][1]*zs,
			xy[0][0]*-zs + xy[0][1]*zc,
			xy[0][2],
			xy[0][3],
		},
		Mat1x4{
			xy[1][0]*zc + xy[1][1]*zs,
			xy[1][0]*-zs + xy[1][1]*zc,
			xy[1][2],
			xy[1][3],
		},
		Mat1x4{
			xy[2][0]*zc + xy[2][1]*zs,
			xy[2][0]*-zs + xy[2][1]*zc,
			xy[2][2],
			xy[2][3],
		},
		Mat1x4{
			xy[3][0]*zc + xy[3][1]*zs,
			xy[3][0]*-zs + xy[3][1]*zc,
			xy[3][2],
			xy[3][3],
		},
	}
}

//Rotate in the XZ Plane
func (m Mat4x4) RotateY(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0]*c + m[0][2]*-s,
			m[0][1],
			m[0][0]*s + m[0][2]*c,
			m[0][3],
		},
		Mat1x4{
			m[1][0]*c + m[1][2]*-s,
			m[1][1],
			m[1][0]*s + m[1][2]*c,
			m[1][3],
		},
		Mat1x4{
			m[2][0]*c + m[2][2]*-s,
			m[2][1],
			m[2][0]*s + m[2][2]*c,
			m[2][3],
		},
		Mat1x4{
			m[3][0]*c + m[3][2]*-s,
			m[3][1],
			m[3][0]*s + m[3][2]*c,
			m[3][3],
		},
	}
}

func (m Mat4x4) RotateYZ(Θy, Θz float64) Mat4x4 {
	yc, ys, zc, zs := math.Cos(Θy), math.Sin(Θy), math.Cos(Θz), math.Sin(Θz)
	y := Mat4x4{
		Mat1x4{
			m[0][0]*yc + m[0][2]*-ys,
			m[0][1],
			m[0][0]*ys + m[0][2]*yc,
			m[0][3],
		},
		Mat1x4{
			m[1][0]*yc + m[1][2]*-ys,
			m[1][1],
			m[1][0]*ys + m[1][2]*yc,
			m[1][3],
		},
		Mat1x4{
			m[2][0]*yc + m[2][2]*-ys,
			m[2][1],
			m[2][0]*ys + m[2][2]*yc,
			m[2][3],
		},
		Mat1x4{
			m[3][0]*yc + m[3][2]*-ys,
			m[3][1],
			m[3][0]*ys + m[3][2]*yc,
			m[3][3],
		},
	}

	return Mat4x4{
		Mat1x4{
			y[0][0]*zc + y[0][1]*zs,
			y[0][0]*-zs + y[0][1]*zc,
			y[0][2],
			y[0][3],
		},
		Mat1x4{
			y[1][0]*zc + y[1][1]*zs,
			y[1][0]*-zs + y[1][1]*zc,
			y[1][2],
			y[1][3],
		},
		Mat1x4{
			y[2][0]*zc + y[2][1]*zs,
			y[2][0]*-zs + y[2][1]*zc,
			y[2][2],
			y[2][3],
		},
		Mat1x4{
			y[3][0]*zc + y[3][1]*zs,
			y[3][0]*-zs + y[3][1]*zc,
			y[3][2],
			y[3][3],
		},
	}
}

//Rotate in the XY Plane
func (m Mat4x4) RotateZ(Θ float64) Mat4x4 {
	c, s := math.Cos(Θ), math.Sin(Θ)
	return Mat4x4{
		Mat1x4{
			m[0][0]*c + m[0][1]*s,
			m[0][0]*-s + m[0][1]*c,
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0]*c + m[1][1]*s,
			m[1][0]*-s + m[1][1]*c,
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0]*c + m[2][1]*s,
			m[2][0]*-s + m[2][1]*c,
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0]*c + m[3][1]*s,
			m[3][0]*-s + m[3][1]*c,
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleX(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ,
			m[0][1],
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ,
			m[1][1],
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ,
			m[2][1],
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ,
			m[3][1],
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleXY(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1] * Δ[1],
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1] * Δ[1],
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1] * Δ[1],
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1] * Δ[1],
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleXZ(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1],
			m[0][2] * Δ[1],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1],
			m[1][2] * Δ[1],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1],
			m[2][2] * Δ[1],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1],
			m[3][2] * Δ[1],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleXYZ(Δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] * Δ[0],
			m[0][1] * Δ[1],
			m[0][2] * Δ[2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] * Δ[0],
			m[1][1] * Δ[1],
			m[1][2] * Δ[2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] * Δ[0],
			m[2][1] * Δ[1],
			m[2][2] * Δ[2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] * Δ[0],
			m[3][1] * Δ[1],
			m[3][2] * Δ[2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleY(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1] * Δ,
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1] * Δ,
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1] * Δ,
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1] * Δ,
			m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleYZ(Δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1] * Δ[0],
			m[0][2] * Δ[1],
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1] * Δ[0],
			m[1][2] * Δ[1],
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1] * Δ[0],
			m[2][2] * Δ[1],
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1] * Δ[0],
			m[3][2] * Δ[1],
			m[3][3],
		},
	}
}

func (m Mat4x4) ScaleZ(Δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2] * Δ,
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2] * Δ,
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2] * Δ,
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2] * Δ,
			m[3][3],
		},
	}
}

func (m Mat4x4) ShearX(τ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][0]*τ[0] + m[0][1],
			m[0][0]*τ[1] + m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][0]*τ[0] + m[1][1],
			m[1][0]*τ[1] + m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][0]*τ[0] + m[2][1],
			m[2][0]*τ[1] + m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][0]*τ[0] + m[3][1],
			m[3][0]*τ[1] + m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ShearXY(τx, τy Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0],
			m[0][0]*τx[0] + m[0][1],
			m[0][0]*τx[1] + m[0][1]*τy[1] + m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0],
			m[1][0]*τx[0] + m[1][1],
			m[1][0]*τx[1] + m[1][1]*τy[1] + m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0],
			m[2][0]*τx[0] + m[2][1],
			m[2][0]*τx[1] + m[2][1]*τy[1] + m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0],
			m[3][0]*τx[0] + m[3][1],
			m[3][0]*τx[1] + m[3][1]*τy[1] + m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ShearXYZ(τx, τy, τz Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][2]*τz[0],
			m[0][0]*τx[0] + m[0][1] + m[0][2]*τz[1],
			m[0][0]*τx[1] + m[0][1]*τy[1] + m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][2]*τz[0],
			m[1][0]*τx[0] + m[1][1] + m[1][2]*τz[1],
			m[1][0]*τx[1] + m[1][1]*τy[1] + m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][2]*τz[0],
			m[2][0]*τx[0] + m[2][1] + m[2][2]*τz[1],
			m[2][0]*τx[1] + m[2][1]*τy[1] + m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][2]*τz[0],
			m[3][0]*τx[0] + m[3][1] + m[3][2]*τz[1],
			m[3][0]*τx[1] + m[3][1]*τy[1] + m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ShearY(τ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τ[0],
			m[0][1],
			m[0][1]*τ[1] + m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τ[0],
			m[1][1],
			m[1][1]*τ[1] + m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τ[0],
			m[2][1],
			m[2][1]*τ[1] + m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τ[0],
			m[3][1],
			m[3][1]*τ[1] + m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ShearYZ(τy, τz Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][1]*τy[0] + m[0][2]*τz[0],
			m[0][1] + m[0][2]*τz[1],
			m[0][1]*τy[1] + m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][1]*τy[0] + m[1][2]*τz[0],
			m[1][1] + m[1][2]*τz[1],
			m[1][1]*τy[1] + m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][1]*τy[0] + m[2][2]*τz[0],
			m[2][1] + m[2][2]*τz[1],
			m[2][1]*τy[1] + m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][1]*τy[0] + m[3][2]*τz[0],
			m[3][1] + m[3][2]*τz[1],
			m[3][1]*τy[1] + m[3][2],
			m[3][3],
		},
	}
}

func (m Mat4x4) ShearZ(τ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] + m[0][2]*τ[0],
			m[0][1] + m[0][2]*τ[1],
			m[0][2],
			m[0][3],
		},
		Mat1x4{
			m[1][0] + m[1][2]*τ[0],
			m[1][1] + m[1][2]*τ[1],
			m[1][2],
			m[1][3],
		},
		Mat1x4{
			m[2][0] + m[2][2]*τ[0],
			m[2][1] + m[2][2]*τ[1],
			m[2][2],
			m[2][3],
		},
		Mat1x4{
			m[3][0] + m[3][2]*τ[0],
			m[3][1] + m[3][2]*τ[1],
			m[3][2],
			m[3][3],
		},
	}
}

func (a Mat4x4) Subtract(b Mat4x4) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			a[0][0] - b[0][0],
			a[0][1] - b[0][1],
			a[0][2] - b[0][2],
			a[0][3] - b[0][3],
		},
		Mat1x4{
			a[1][0] - b[1][0],
			a[1][1] - b[1][1],
			a[1][2] - b[1][2],
			a[1][3] - b[1][3],
		},
		Mat1x4{
			a[2][0] - b[2][0],
			a[2][1] - b[2][1],
			a[2][2] - b[2][2],
			a[2][3] - b[2][3],
		},
		Mat1x4{
			a[3][0] - b[3][0],
			a[3][1] - b[3][1],
			a[3][2] - b[3][2],
			a[3][3] - b[3][3],
		},
	}
}

func (m Mat4x4) SubtractScalar(f float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0] - f,
			m[0][1] - f,
			m[0][2] - f,
			m[0][3] - f,
		},
		Mat1x4{
			m[1][0] - f,
			m[1][1] - f,
			m[1][2] - f,
			m[1][3] - f,
		},
		Mat1x4{
			m[2][0] - f,
			m[2][1] - f,
			m[2][2] - f,
			m[2][3] - f,
		},
		Mat1x4{
			m[3][0] - f,
			m[3][1] - f,
			m[3][2] - f,
			m[3][3] - f,
		},
	}
}

func (m Mat4x4) Trace() float64 {
	return m[0][0] + m[1][1] + m[2][2] + m[3][3]
}

func (m Mat4x4) TranslateX(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ + m[3][3],
		},
	}
}

func (m Mat4x4) TranslateXY(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][1]*δ[1] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][1]*δ[1] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][1]*δ[1] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][1]*δ[1] + m[3][3],
		},
	}
}

func (m Mat4x4) TranslateXYZ(δ Vec3) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][1]*δ[1] + m[0][2]*δ[2] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][1]*δ[1] + m[1][2]*δ[2] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][1]*δ[1] + m[2][2]*δ[2] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][1]*δ[1] + m[3][2]*δ[2] + m[3][3],
		},
	}
}

func (m Mat4x4) TranslateXZ(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][0]*δ[0] + m[0][2]*δ[1] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][0]*δ[0] + m[1][2]*δ[1] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][0]*δ[0] + m[2][2]*δ[1] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][0]*δ[0] + m[3][2]*δ[1] + m[3][3],
		},
	}
}

func (m Mat4x4) TranslateY(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][1]*δ + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][1]*δ + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][1]*δ + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][1]*δ + m[3][3],
		},
	}
}

func (m Mat4x4) TranslateYZ(δ Vec2) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][1]*δ[0] + m[0][2]*δ[1] + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][1]*δ[0] + m[1][2]*δ[1] + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][1]*δ[0] + m[2][2]*δ[1] + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][1]*δ[0] + m[3][2]*δ[1] + m[3][3],
		},
	}
}

func (m Mat4x4) TranslateZ(δ float64) Mat4x4 {
	return Mat4x4{
		Mat1x4{
			m[0][0],
			m[0][1],
			m[0][2],
			m[0][2]*δ + m[0][3],
		},
		Mat1x4{
			m[1][0],
			m[1][1],
			m[1][2],
			m[1][2]*δ + m[1][3],
		},
		Mat1x4{
			m[2][0],
			m[2][1],
			m[2][2],
			m[2][2]*δ + m[2][3],
		},
		Mat1x4{
			m[3][0],
			m[3][1],
			m[3][2],
			m[3][2]*δ + m[3][3],
		},
	}
}

func (m Mat4x4) Transpose() Mat4x4 {
	return Mat4x4{
		Mat1x4{m[0][0], m[1][0], m[2][0], m[3][0]},
		Mat1x4{m[0][1], m[1][1], m[2][1], m[3][1]},
		Mat1x4{m[0][2], m[1][2], m[2][2], m[3][2]},
		Mat1x4{m[0][3], m[1][3], m[2][3], m[3][3]},
	}
}

type Mat4xN []float64
